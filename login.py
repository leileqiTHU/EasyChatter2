# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'login.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
import sys
import demoui
import socket
import time
import cv2
import numpy as np
from Cryptodome.Cipher import AES
from Cryptodome import Random
import rsa
from netutils import *
class Ui_login(NetFunctions):
    def __init__(self):
        super().__init__()
        # self.MainWindow = MainWindow
        pass
    def setupUi(self, login):
        self.login = login
        login.setObjectName("login")
        login.resize(400, 300)
        self.userframe = QtWidgets.QLineEdit(login)
        self.userframe.setGeometry(QtCore.QRect(200, 80, 113, 21))
        self.userframe.setObjectName("userframe")
        self.pwdframe = QtWidgets.QLineEdit(login)
        self.pwdframe.setGeometry(QtCore.QRect(200, 130, 113, 21))
        self.pwdframe.setObjectName("pwdframe")
        self.label = QtWidgets.QLabel(login)
        self.label.setGeometry(QtCore.QRect(70, 80, 72, 15))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(login)
        self.label_2.setGeometry(QtCore.QRect(70, 130, 72, 15))
        self.label_2.setObjectName("label_2")
        self.loginButton = QtWidgets.QPushButton(login)
        self.loginButton.setGeometry(QtCore.QRect(100, 200, 93, 28))
        self.loginButton.setObjectName("loginButton")
        self.pushButton_2 = QtWidgets.QPushButton(login)
        self.pushButton_2.setGeometry(QtCore.QRect(220, 200, 93, 28))
        self.pushButton_2.setObjectName("pushButton_2")

        self.retranslateUi(login)
        QtCore.QMetaObject.connectSlotsByName(login)
        
        self.loginButton.clicked.connect(self.loginFunc)
        self.pushButton_2.clicked.connect(self.registFunc)
        self.pwdframe.returnPressed.connect(self.loginFunc)
    def getMessages(self):
        return {'serversocket': self.servertcp,
                'KDCpubkey':self.KDCpubkey,
                'username': self.username,
                'password': self.password}
    def loginFunc(self):
        self.username = self.userframe.text()
        self.password = self.pwdframe.text()
        
        if(self.verify(self.username, self.password)):
            self.controller.login2Main()
        else:
            # 消息：危险ctitical
            QMessageBox.critical(self,"错误","用户名或者密码错误",QMessageBox.Yes )

    def registFunc(self):
        self.username = self.userframe.text()
        self.password = self.pwdframe.text()
        self.servertcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    #建立连接
        self.servertcp.connect(('172.20.18.73',8080))
        #接收KDC公钥
        print("t1")
        self.KDCpubkey = self.recvData(self.servertcp)
        print("t2")
        self.KDCpubkey = rsa.PublicKey(*eval(self.KDCpubkey.decode()))
        #发送用户名密码公钥
        verify_code = Random.new().read(16)#128bit随机验证码
        with open('./pubkey.pem') as f:#本地存储
            self.pubkey = rsa.PublicKey.load_pkcs1(f.read())
        data = str((self.username,self.password,verify_code,self.pubkey.save_pkcs1().decode())).encode()
        data = self.encrypt(data,self.KDCpubkey)
        print("t3")
        self.sendData(self.servertcp,data)
        print("t4")
        #接收服务器回应
        reply = self.recvData(self.servertcp)
        if(eval(reply.decode())):
            QMessageBox.information(self,"注册","注册成功！",QMessageBox.Yes)
        else:
            QMessageBox.information(self,"注册","注册失败！",QMessageBox.Yes)
    def verify(self, username, password):
        self.servertcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    #建立连接
        self.servertcp.connect(('172.20.18.73',8080))
        #接收KDC公钥
        print("t1")
        self.KDCpubkey = self.recvData(self.servertcp)
        print("t2")
        self.KDCpubkey = rsa.PublicKey(*eval(self.KDCpubkey.decode()))
        #发送用户名密码
        verify_code = Random.new().read(16)#128bit随机验证码
        data = str((username,password,verify_code,None)).encode()
        data = self.encrypt(data,self.KDCpubkey)
        print("t3")
        self.sendData(self.servertcp,data)
        print("t4")
        #接收服务器回应
        reply = self.recvData(self.servertcp)
        #验证这是KDC签过名的verify_code
        try:
            rsa.verify(verify_code, reply, self.KDCpubkey)
            return True
        except:
            return False
        #索要票据
        # data = 'B'.encode()
        # sendData(servertcp,data)
        # #接收票据及Bip、B的公钥
        # ticket = recvData(servertcp)
        # Bip = recvData(servertcp).decode()
        # Bpubkey = recvData(servertcp)
        # Bpubkey = rsa.PublicKey.load_pkcs1(Bpubkey)
        # servertcp.close()
        # #建立与B的连接
        # Btcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # Btcp.connect((Bip,9999))
        # print('send data...')
        # #发送票据
        # sendData(Btcp, ticket)
        # #接收验证消息
        # data = recvData(Btcp)
        # #提取自己的私钥并解密
        # with open('privkey.pem') as f:
        #     privkey = rsa.PrivateKey.load_pkcs1(f.read())
        # data = decrypt(data, privkey)
        # #发送验证消息
        # data = encrypt(data, Bpubkey)
        # sendData(Btcp, data)
        # #接收AES密钥
        # data = recvData(Btcp)
        # key = decrypt(data, privkey)
        # print(username)
        # print(password)
    def retranslateUi(self, login):
        _translate = QtCore.QCoreApplication.translate
        login.setWindowTitle(_translate("login", "登录CRYPT-Leqi"))
        self.label.setText(_translate("login", "用户名"))
        self.label_2.setText(_translate("login", "密码"))
        self.loginButton.setText(_translate("login", "登录"))
        self.pushButton_2.setText(_translate("login", "注册新用户"))
    def registController(self, controller):
        self.controller = controller
class Window_login(QMainWindow, Ui_login):
    def __init__(self, parent=None):
        print(type(Window_login))
        super(Window_login, self).__init__(parent)
        self.setupUi(self)

class Controller(object):
    def __init__(self):
        super().__init__()
    def addLogin(self,loginwindow):
        self.loginwindow = loginwindow
        self.loginwindow.registController(self)
    def addMain(self, mainwindow):
        self.mainwindow = mainwindow
        self.mainwindow.registController(self)
    # def __init__(self,loginWindow, mainWindow):
    #     self.loginWindow = loginWindow
    #     self.mainWindow = mainWindow
    def login2Main(self):
        self.mainwindow.acceptMessages(self.loginwindow.getMessages())
        self.loginwindow.close()
        self.mainwindow.show()

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    # LoginWindow = QtWidgets.QMainWindow()
    # MainWindow = QtWidgets.QMainWindow()
    # ui = Ui_login(MainWindow)
    # ui.setupUi(LoginWindow)
    controller = Controller()

    LoginWindow = Window_login()
    controller.addLogin(LoginWindow)
    MainWindow = demoui.Window_MainWindow()
    controller.addMain(MainWindow)
    LoginWindow.show()
    sys.exit(app.exec_())